#+TITLE: Security Policy
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh

* Security Policy

** Supported Versions

| Version | Supported          |
|---------+-------------------|
| main    | ✓                 |
| < 1.0   | ✗                 |

** Reporting a Vulnerability

We take security seriously. If you discover a security vulnerability, please follow these steps:

*** DO NOT
- Open a public issue
- Discuss the vulnerability publicly
- Exploit the vulnerability

*** DO
1. Email security concerns to: j@wal.sh
2. Include:
   - Description of the vulnerability
   - Steps to reproduce
   - Potential impact
   - Suggested fix (if any)

*** Response Timeline
- Acknowledgment: Within 48 hours
- Initial assessment: Within 1 week
- Fix timeline: Depends on severity

** Security Best Practices

*** API Keys and Secrets
- *NEVER* commit API keys or secrets
- Use =.env= files (already in =.gitignore=)
- Rotate credentials regularly
- Use AWS IAM roles when possible

*** AWS Security
#+BEGIN_SRC shell
# Use temporary credentials
aws sts get-session-token

# Principle of least privilege
# Only grant necessary permissions
#+END_SRC

*** LocalStack Development
- LocalStack is for development only
- Never use LocalStack credentials in production
- Always test security features with real AWS

*** Dependencies
- Regular dependency updates: =uv pip compile --upgrade=
- Security scanning: =pip-audit=
- Keep Python version current

** Security Checklist

*** For Contributors
- [ ] No hardcoded credentials
- [ ] Input validation on all user inputs
- [ ] SQL injection prevention in SQL agent
- [ ] XSS prevention in any web interfaces
- [ ] Proper error handling (no stack traces to users)

*** For Workshop Attendees
- [ ] Use separate AWS account for workshop
- [ ] Enable MFA on AWS account
- [ ] Use IAM roles, not root account
- [ ] Monitor AWS costs with billing alerts
- [ ] Clean up resources after workshop

** Known Security Considerations

*** RAG Pipeline
- Embedding models may memorize training data
- Retrieved documents should be sanitized
- Implement content filtering for sensitive data

*** SQL Agent
- Always use parameterized queries
- Validate and sanitize natural language inputs
- Restrict database permissions

*** Cost Controls
- Set AWS budget alerts
- Use resource tags for tracking
- Implement request rate limiting

** Compliance

This workshop is for educational purposes. When using in production:

- Follow AWS Well-Architected Framework
- Implement proper logging and monitoring
- Ensure GDPR/CCPA compliance for user data
- Regular security audits

** Resources

- [[https://aws.amazon.com/security/][AWS Security Best Practices]]
- [[https://owasp.org/www-project-top-ten/][OWASP Top 10]]
- [[https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/welcome.html][AWS Security Pillar]]